/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.
 *
 *   Created: Thu Oct 12 16:29:25 1995
 */
#ifndef _proto_h
#define _proto_h
#include "Va.h"
#if __STDC__

/* colors.c: colors.c
 *
 * Kevin P. Smith  6/11/89
 */

extern void getColorDefs ( void );

/* credits.c:
 * credits.c
 *
 * Bill Dyess
 *
 */

extern void showCredits ( W_Window win );

/* dashboard.c:
 * dashboard.c - graphic tstatw - 6/2/93
 *
 * copyright 1993 Lars Bernhardsson (lab@mtek.chalmers.se)
 * Free to use as long as this notice is left here.
 *
 * Color by Nick Trown.
 * Paradise shoehorning by Bill Dyess.
 * Rainbow dashboard by Bill Dyess
 */

extern void db_bar ( char *lab, int x, int y, int value, int tmpmax, int max, int digits, int color );
extern void db_box ( int x, int y, int width, int height, int f, int color );
extern void db_color_bar ( char *lab, int x, int y, int barvalue, int numvalue, int tmpmax, int max, int digits );
extern void db_flags ( int fr );
extern void db_redraw ( int fr );
extern void db_redraw_BRM ( int fr );
extern void db_redraw_krp ( int fr );
extern void db_timer ( int fr, int xloc, int yloc );
extern void light_erase ( void );
extern void light_receive ( void );
extern void light_send ( void );
extern void redrawTstats ( void );
extern void stline ( int flag );

/* death.c:
 * death.c
 */

extern void death ( void );
extern void redraw_death_messages ( void );

/* detonate.c:
 * detonate.c
 */

extern void detmine ( void );

/* defaults.c: defaults.c
 *
 * Kevin P. Smith  6/11/89
 * Bill Dyess      9/29/93  - moved all default settings to resetDefaults
 *                           from main
 * Bill Dyess	   11/8/93  - created expandFilename function
 * Bill Dyess      11/20/93 - added #include capability
 */

extern int booleanDefault ( char *def, int preferred );
extern int defaultShip ( int preferred );
extern char * expandFilename ( char *filename );
extern void freeDefaults ( void );
extern char * initDefaults ( char *deffile );
extern void initLogFile ( void );
extern int intDefault ( char *def, int preferred );
extern void resetDefaults ( void );
extern char * stringDefault ( char *def, char *preferred );

/* defwin.c: This file generated by configure. */

extern char * btoa ( int v );
extern void def_action ( W_Event *ev );
extern void def_write ( char *file );
extern char * itos ( int v );
extern void showdef ( void );

/* die.c:
  die.c
  Copyright 1995 Bill Dyess
 */

extern void die ( VaT(const char *) VaDots );

/* distress.c:
 * distress.c
 */

extern int condmacro ( char *bufa, char *bufb, int *inda, int *indb, int flag );
extern void Dist2Mesg ( struct distress *dist, char *buf );
extern void HandleGenDistr ( char *message, unsigned int from, unsigned int to, struct distress *dist );
extern int itoa2 ( int n, char s[] );
extern int makedistress ( struct distress *dist, char *cry, char *pm );
extern int skipmacro ( char buf[], int i );
extern int solvetest ( char *bufa, int *inda );
extern char * strcap ( char *s );
extern int testmacro ( char *bufa, char *bufb, int *inda, int *indb );

/* dmessage.c:
 * dmessage.c
 *
 * for the client of a socket based protocol.
 * code for message window scrollback added by Bill Dyess 12/7/93
 */

extern void CheckFeatures ( char *m );
extern void dmessage ( char *message, unsigned int flags, unsigned int from, unsigned int to );
extern void evalFlags ( int type, char *flagList );
extern void initMessageWindows ( void );
extern int instr ( char *string1, char *string2 );
extern void logit ( char *message );
extern void messageWinEvent ( W_Event *evt );
extern void print_message ( char *message, unsigned int flags, unsigned int from, unsigned int to );
extern void rsvp_borg_call ( char *message, int from );
extern void sendVersion ( void );

/* enter.c:
 * enter.c
 *
 * This version modified to work as the client in a socket based protocol.
 */

extern void enter ( void );
extern void openmem ( void );

/* findslot.c:
 * findslot.c
 *
 * Kevin Smith 03/23/88
 *
 */

extern int findslot ( void );

/* gameconf.c: src/defines.h.  Generated automatically by configure.  */

extern void build_default_configuration ( void );
extern int compute_gameparam_size ( char *buf );
extern void free_phasers ( void );
extern void free_plasmas ( void );
extern void free_ranks ( void );
extern void free_royal ( void );
extern void free_teams ( void );
extern void free_thingies ( void );
extern void free_torps ( void );
extern void initialize_planets ( void );
extern void initialize_plasmas ( void );
extern void initialize_players ( void );
extern void initialize_thingies ( void );
extern void initialize_torps ( void );
extern void init_ranks ( void );
extern void init_royal ( void );
extern void load_default_teamlogos ( void );
extern void load_default_teams ( void );
extern void load_generic_teams ( void );
extern void reinit_ranks ( void );
extern void reinit_royal ( void );
extern void resize_players ( void );

/* getname.c:
 * getname.c
 *
 * Kevin P. Smith 09/28/88
 *
 */

extern void getname ( char *defname, char *def_passwd );
extern void noautologin ( void );

/* getship.c:
 * getship.c for client of socket protocol.
 *
 * This file has been mangled so it only sets the ship characteristics needed.
 */

extern struct ship * getship ( int s_type );
extern void init_galaxy_class ( void );
extern void init_shiptypes ( void );

/* helpwin.c:
 * helpwin.c
 * copyright 1991 ERic mehlhaff
 * Free to use, hack, etc. Just keep these credits here.
 * Use of this code may be dangerous to your health and/or system.
 * Its use is at your own risk.
 * I assume no responsibility for damages, real, potential, or imagined,
 * resulting  from the use of it.
 *
 * Hacked into paradise by Bill Dyess
 */

extern void fillhelp ( void );
extern void update_Help_to_Keymap ( char helpmessage[] );

/* inform.c:
 * inform.c
 */

extern void destroyInfo ( void );
extern void inform ( W_Window ww, int x, int y, int key );
extern void updateInform ( void );

/* interface.c:
 * interface.c
 *
 * This file will include all the interfaces between the input routines
 *  and the daemon.  They should be useful for writing robots and the
 *  like
 */

extern void beam_down ( void );
extern void beam_up ( void );
extern void bomb_planet ( void );
extern void cloak ( void );
extern int mtime ( void );
extern void set_course ( unsigned int dir );
extern void set_speed ( int speed );
extern void shield_down ( void );
extern void shield_tog ( void );
extern void shield_up ( void );

/* keymap.c:
 * keymap.c
 * Bill Dyess, 10/20/93
 */

extern void buildShipKeymap ( struct ship *shipp );
extern void buttonmapAdd ( char *str, char *kmap );
extern void cbuttonmapAdd ( char *cstr, char *kmap );
extern void ckeymapAdd ( char *cstr, char *kmap );
extern int doKeymap ( W_Event *data );
extern void initkeymap ( int type );
extern void keymapAdd ( char *str, char *kmap );

/* local.c: local.c, all code that writes to the local window (w) [BDyess] */

extern PlanetImageNode * createLocalImageNode ( struct planet *p, bitstruct bits );
extern void doShowMySpeed ( int dx, int dy, W_Image *ship_bits, struct player *j );
extern void local ( void );
extern void redraw_all_planets ( void );
extern void redraw_asteroids ( void );

/* macros.c: here's pretty much all the macro code.   */

extern void doMacro ( W_Event *data );
extern void doMacro2 ( struct macro *m, W_Event *data );
extern void getConditionalString ( char **locpntr, char **destpntr, W_Event *data );
extern void getTestString ( char *buf, char **locpntr, char **destpntr, W_Event *data );
extern void handle_conditional ( char **locpntr, char **destpntr, W_Event *data );
extern void handle_dollar ( char **locpntr, char **destpntr, W_Event *data );
extern void handle_special ( char **locpntr, char **destpntr, W_Event *data );
extern void handle_test ( char **locpntr, char **destpntr, W_Event *data );
extern void ignoreConditionalString ( char **locpntr );
extern void initMacros ( void );

/* macrowin.c:
 * macrowin.c from helpwin.c
 * copyright 1993 Nick Trown
 * copyright 1991 ERic mehlhaff
 * Free to use, hack, etc. Just keep these credits here.
 * Use of this code may be dangerous to your health and/or system.
 * Its use is at your own risk.
 * I assume no responsibility for damages, real, potential, or imagined,
 * resulting  from the use of it.
 * Yeah.....what Eric said...
 */

extern void filldist ( int fill );
extern void fillmacro ( void );
extern int formatline ( char *line );
extern void showMacroWin ( void );
extern void switchmacros ( void );

/* map.c: map.c, all the routines that use the map window [BDyess] */

extern PlanetImageNode * createMapImageNode ( struct planet *p, bitstruct bits );
extern bitstruct createPlanetBits ( struct planet *p, char *s, int l );
extern void drawMapPlanet ( struct planet *p, int x, int y );
extern W_Image * getPlanetImage ( PlanetImageNode *lhead, struct planet *p, bitstruct bits, PlanetImageNode * (*createNode) () );
extern void map ( void );

/* motdwin.c:**  Pop-up motd window code.  [BDyess] 11/21/93  ***/

extern void motdWinEvent ( W_Event *evt );
extern void showMotdWin ( void );

/* newstats.c:
 * newstats.c
 *
 * As best I can tell, this was written by Tundra Dan.
 */

extern void calibrate_Newstats ( void );
extern void format_value ( int value, int start, int length );
extern void redrawNewStats ( void );
extern void stat_timer ( int fr, int xloc, int yloc );
extern void updateNewStats ( void );

/* newwin.c:
 * newwin.c
 */

extern void do_refit ( int type );
extern void drawIcon ( void );
extern void erase_motd ( void );
extern void get_N_dispatch_outfit_event ( int *team, int *s_type, int *lastplayercount );
extern void mapAll ( void );
extern void newMotdLine ( char *line );
extern void newMotdPic ( int x, int y, int width, int height, char *bits, int page );
extern void newwin ( char *hostmon, char *progname );
extern void new_entrywindow ( int *team, int *s_type );
extern void showMotd ( W_Window win );
extern void showValues ( W_Window win );

/* option.c:
 * option.c
 */

extern int optionaction ( W_Event *data );
extern void optiondone ( void );
extern void optionredrawoption ( int *ip );
extern void optionredrawtarget ( W_Window win );
extern void optionwindow ( void );

/* packets.c: src/defines.h.  Generated automatically by configure.  */

extern int size_of_cpacket ( void *pkt );
extern int size_of_spacket ( unsigned char *pkt );

/* parsemeta.c:
 * meta.c     - Nick Trown    May 1993
 */

extern void metainput ( void );
extern void metawindow ( void );
extern void openmeta ( void );

/* planetlist.c:
 * planetlist.c
 */

extern void planetlist ( void );

/* planets.c:
 * planets.c
 *
 * Kevin P. Smith  2/21/89
 *
 * This file contains the galaxy definition as well as some support for
 *  determining when parts of the galactic map need to be redrawn.
 */

extern void checkRedraw ( int x, int y );
extern void drawStars ( void );
extern void initOnePlanet ( struct planet *pl );
extern void initPlanets ( void );
extern void initStars ( void );
extern int randcolor ( void );
extern void _drawStars ( void );
extern void _initStars ( void );

/* playerlist.c:
 * playerlist.c
 * modified to sort by teams by Bill Dyess on 9/23/93
 */

extern void getdesig ( struct player *j, char *desig );
extern char * get_players_rank_name ( struct player *j );
extern void playerlist ( void );
extern void playerlist2 ( void );
extern void playerwEvent ( W_Event *data );
extern void selectblkbozo ( W_Event *data );

/* ranklist.c:
 * ranklist.c
 *
 * Kevin P. Smith 12/5/88
 *
 */

extern void ranklist ( void );

/* ratings.c:
 * ratings.c,  2/13/94 Bill Dyess
 */

extern struct ratings * get_ratings ( struct player *j, struct ratings *r );

/* rotate.c:
 * rotate.c
 *
 */

extern void rotate_all ( void );
extern void rotate_coord ( int *x, int *y, int d, int cx, int cy );
extern void rotate_dir ( unsigned char *d, int r );
extern void rotate_gcenter ( int *x, int *y );

/* sintab.c:
 * sintab.c
 *
 * Also initialize blk_giwdth to 100000 and blk_windgwidth
 * to WINSIDE/blk_gwidth
 */

extern void inittrigtables ( void );

/* smessage.c:
 * smessage.c
 */

extern void carry_report ( void );
extern void emergency ( void );
extern char * getaddr ( int who );
extern char * getaddr2 ( int flags, int recip );
extern int getgroup ( int address, int *recip );
extern void message_expose ( void );
extern void message_off ( void );
extern void message_on ( void );
extern void pmessage ( char *str, int recip, int group );
extern void sendCharMessage ( char *buffer, int ch );
extern void smessage ( int ichar );
extern void smessage_ahead ( int head, int ichar );

/* socket.c:
 * Socket.c
 *
 * Kevin P. Smith 1/29/89
 * UDP stuff v1.0 by Andy McFadden  Feb-Apr 1992
 *
 * UDP protocol v1.0
 *
 * Routines to allow connection to the xtrek server.
 */

extern char * callServer ( int port, char *server );
extern int closeUdpConn ( void );
extern int compute_extension1_size ( char *pkt );
extern void connectToServer ( int port );
extern int gwrite ( int fd, char *buffer, int bytes );
extern int idx_to_mask ( int i );
extern int isServerDead ( void );
extern int mask_to_idx ( int m );
extern void print_totals ( void );
extern int readFromServer ( void );
extern void sendDetMineReq ( int torp );
extern void sendLoginReq ( char *name, char *pass, char *loginname, int query );
extern void sendMessage ( char *mes, int group, int indiv );
extern void sendOptionsPacket ( void );
extern void sendRepressReq ( int state, int pnum );
extern void sendShortPacket ( int type, int state );
extern void sendTeamReq ( int team, int ship );
extern void sendTractorReq ( int state, int pnum );
extern void sendUdpReq ( int req );
extern void sendUpdatePacket ( long speed );
extern void socketPause ( int sec, int usec );
extern int sock_read ( int s, char *data, int size );

/* stats.c:
 * stats.c
 */

extern void calibrate_stats ( void );
extern void redrawStats ( void );
extern void updateStats ( void );

/* util.c:
 * util.c
 * added functionality to gettarget() - Bill Dyess 10/6/93
 */

extern struct obtype * gettarget ( W_Window ww, int x, int y, int targtype );
extern struct id * getTargetID ( W_Window ww, int x, int y, int targtype );
extern double hypot2 ( double x, double y );
extern char * team_bit_string ( int mask );

/* varydamage.c:
 * varydamage.c
 */

extern void doHull ( int dx, int dy, W_Image *ship_bits, struct player *j );
extern void doShields ( int dx, int dy, W_Image *ship_bits, struct player *j );

/* war.c:
 * war.c
 */

extern void waraction ( W_Event *data );
extern void warwindow ( void );

/* warning.c:
 * warning.c
 */

extern void hwarning ( char *text );
extern char * timeString ( time_t t );
extern void warning ( char *text );

/* udpopt.c:
 * udpopt.c - present UDP control window
 */

extern void udpaction ( W_Event *data );
extern void udpdone ( void );
extern void udprefresh ( int i );
extern void udpwindow ( void );

/* blk_parsemotd.c:
 *
 */

extern void blk_parsemotd ( char *line );

/* shortcomm.c: This file implements all SHORT_PACKETS functions */

extern void add_whydead ( char *s, int m );
extern void handleVPlanet ( unsigned char *sbuf );
extern void handleVPlayer ( unsigned char *sbuf );
extern void handleVTorp ( unsigned char *sbuf );
extern void handleVTorpInfo ( unsigned char *sbuf );
extern void sendShortReq ( int state );
extern void sendThreshold ( int v );
extern char * ship_type ( struct ship *shp );

/* spopt.c: This file generated by configure. */

extern void spaction ( W_Event *data );
extern void spdone ( void );
extern void sprefresh ( int i );
extern void spwindow ( void );

/* ping.c:
 * ping.c
 *
 */

extern void calc_lag ( void );
extern void sendServerPingResponse ( int number );
extern void startPing ( void );
extern void stopPing ( void );

/* pingstats.c:
 * pingstats.c	(mostly taken from stats.c)
 */

extern void initPStats ( void );
extern int pStatsHeight ( void );
extern int pStatsWidth ( void );
extern void redrawPStats ( void );
extern void updatePStats ( void );

/* wide_plist.c: This file generated by configure. */

extern int playerlistnum ( void );
extern void plist_line ( struct player *j, int pos );
extern void Sorted_playerlist2 ( void );
extern void wideplayerlist ( void );
extern void wideplayerlist2 ( void );
extern void writeDiffText ( W_Window window, int x, int y, W_Color color, char *orig, char *new, W_Font font );

/* feature.c:
 * Feature.c
 *
 * March, 1994.    Joe Rumsey, Tedd Hadley
 *
 * most of the functions needed to handle SP_FEATURE/CP_FEATURE
 * packets.  fill in the features list below for your client, and
 * add a call to reportFeatures just before the RSA response is sent.
 * handleFeature should just call checkFeature, which will search the
 * list and set the appropriate variable.  features unknown to the
 * server are set to the desired value for client features, and off
 * for server/client features.
 *
 * feature packets look like:
struct feature_cpacket {
   char                 type;
   char                 feature_type;
   char                 arg1,
                        arg2;
   int                  value;
   char                 name[80];
};

 *  type is CP_FEATURE, which is 60.  feature_spacket is identical.
 */

extern void reportFeatures ( void );
extern void sendFeature ( char *name, int feature_type, int value, int arg1, int arg2 );

/* beeplite.c: This file generated by configure. */

extern void litedefaults ( void );
extern void liteplanet ( struct planet *l, W_Color col );
extern void liteplayer ( struct player *j, W_Color col );
extern int makelite ( struct distress *dist, char *pm );
extern void rcdlite ( struct distress *dist );

/* recorder.c: This file generated by configure. */

extern void pb_dokey ( W_Event *event );
extern void pb_framectr ( int xloc, int yloc );
extern void pb_input ( void );
extern void pb_skip ( int frames );
extern int readRecorded ( int fp, char *data, int len );
extern void recordPacket ( char *data, int len );
extern int startPlayback ( void );
extern void startRecorder ( void );
extern void stopRecorder ( void );
extern void writeUpdateMarker ( void );

/* senddist.c:
 * distress.c
 */

extern struct distress * loaddistress ( enum dist_type i, W_Event *data );
extern int pmacro ( int mnum, int who, W_Event *data );
extern void rcd ( enum dist_type i, W_Event *data );

/* tools.c: tools.c - shell escape, graphic toolsw - 10/10/93
 * 
 * copyright 1993 Kurt Siegl <siegl@risc.uni-linz.ac.at> Free to use, hack, etc.
 * Just keep these credits here. Use of this code may be dangerous to your
 * health and/or system. Its use is at your own risk. I assume no
 * responsibility for damages, real, potential, or imagined, resulting  from
 * the use of it.
 * 
 */

extern void sendTools ( char *str );
extern void showToolsWin ( void );

/* hockey.c: This file generated by configure. */

extern void drawPuckArrow ( void );
extern void galactic_hockey ( void );
extern void hockeyInit ( void );
extern void tactical_hockey ( void );

/* images.c: images.c.  Contains the image control data. [BDyess] */

extern int cmpfilenames ( const void *left, const void *right );
extern W_Image * getImage ( int offset );
extern int getImageNum ( W_Image *image );
extern W_Image * getShipImage ( int team, int ship );
extern void loadAllImages ( void );
extern void loadImageByFilename ( char *filename );

/* sound.c:
 * sound.c - Platform Independant Sound Support - Dec. 1994
 *
 * Copyright 1994 Sujal M. Patel (smpatel@wam.umd.edu)
 * Conditions in "copyright.h"          
 */

extern void init_sound ( void );
extern void kill_sound ( void );
extern void maybe_play_sound ( int k );
extern void play_sound ( int k );
extern void sound_completed ( int k );

/* main.c:
 * main.c
 */

extern int main ( int argc, char **argv );
extern void reaper ( void );

/* input.c:
 * input.c
 *
 * Modified to work as client in socket based protocol
 */

extern void dispatch_W_button_event ( W_Event *evt );
extern void dispatch_W_event ( W_Event *evt );
extern void dispatch_W_expose_event ( W_Event *evt );
extern void dispatch_W_key_event ( W_Event *evt );
extern int getcourse ( W_Window ww, int x, int y );
extern void initinput ( void );
extern void input ( void );

/* redraw.c:
 * redraw.c
 */

extern void intrupt ( void );
extern struct _clearzone * new_czone ( void );
extern void recalcWindowConstants ( void );
extern void redraw ( void );
extern int zoom_offset ( int v );

/* x11window.c: x11window.c
 *
 * Kevin P. Smith  6/11/89
 * Much modified by Jerry Frain and Joe Young
 * Many many modifications by Bill Dyess
 * Full-color rewriting done by Bill Dyess
 */

extern int checkBuffered ( char *name );
extern int checkloaded ( W_Image *image );
extern int checkMapped ( char *name );
extern int checkScrollSaveLines ( char *name );
extern int findMouseInWin ( int *x, int *y, W_Window window );
extern struct window * newWindow ( Window window, int type );
extern void W_Beep ( void );
extern W_Image * W_BitmapToImage ( unsigned int width, unsigned int height, char *bits );
extern void W_Buffer ( W_Window window, int on );
extern void W_CacheClearArea ( W_Window window, int x, int y, int width, int height );
extern void W_CacheLine ( W_Window window, int X0, int Y0, int X1, int Y1, int color );
extern void W_CachePoint ( W_Window window, int x, int y, int color );
extern void W_ChangeBorder ( W_Window window, int color );
extern void W_ClearArea ( W_Window window, int x, int y, unsigned int width, unsigned int height );
extern void W_ClearBuffer ( W_Window window );
extern void W_ClearWindow ( W_Window window );
extern W_Image * W_CreateCombinedImage ( W_Image **imagelist, W_Color color );
extern void W_DefineCursor ( W_Window window, int width, int height, char *bits, char *mask, int xhot, int yhot );
extern void W_DefineTCrossCursor ( W_Window window );
extern void W_DefineTextCursor ( W_Window window );
extern void W_Deiconify ( W_Window window );
extern void W_DestroyWindow ( W_Window window );
extern void W_DirectMaskText ( W_Window window, int x, int y, W_Color color, char *str, int len, W_Font font );
extern void W_DisplayBuffer ( W_Window window );
extern void W_DrawImage ( W_Window window, int x, int y, int frame, W_Image *image, W_Color color );
extern void W_DrawImageBar ( W_Window win, int x, int y, int len, W_Image *image );
extern void W_DrawImageNoClip ( W_Window window, int x, int y, int frame, W_Image *image, W_Color color );
extern void W_DrawImageOr ( W_Window window, int x, int y, int frame, W_Image *image, W_Color color );
extern void W_DrawPoint ( W_Window window, int x, int y, W_Color color );
extern void W_DrawSectorHighlight ( W_Window window, int x, int y, int width, int h, W_Color color );
extern void W_DrawShield ( W_Window window, int centerx, int centery, unsigned int diameter, W_Color color );
extern int W_EventsPending ( void );
extern void W_FillArea ( W_Window window, int x, int y, unsigned int width, unsigned int height, W_Color color );
extern void W_Flush ( void );
extern void W_FlushClearAreaCache ( W_Window window );
extern void W_FlushLineCaches ( W_Window window );
extern void W_FlushPointCaches ( W_Window window );
extern void W_FreeImage ( W_Image *image );
extern void W_GetEvent ( W_Event *wevent );
extern void W_Initialize ( char *str );
extern int W_IsBuffered ( W_Window window );
extern int W_IsMapped ( W_Window window );
extern int W_LoadExternalImage ( W_Image *image );
extern int W_LoadImage ( W_Image *image );
extern int W_LoadInternalImage ( W_Image *image );
extern void W_MakeLine ( W_Window window, int X0, int Y0, int X1, int Y1, W_Color color );
extern W_Window W_MakeMenu ( char *name, int x, int y, int width, int height, W_Window parent, int border );
extern W_Window W_MakeScrollingWindow ( char *name, int x, int y, int width, int height, W_Window parent, char *cursname, int border );
extern W_Window W_MakeTextWindow ( char *name, int x, int y, int width, int height, W_Window parent, char *cursname, int border );
extern void W_MakeTractLine ( W_Window window, int X0, int Y0, int X1, int Y1, W_Color color );
extern W_Window W_MakeWindow ( char *name, int x, int y, int width, int height, W_Window parent, char *cursname, int border, W_Color color );
extern void W_MapWindow ( W_Window window );
extern void W_MaskText ( W_Window window, int x, int y, W_Color color, char *str, int len, W_Font font );
extern int W_Mono ( void );
extern void W_NextEvent ( W_Event *wevent );
extern void W_OverlayImage ( W_Window window, int x, int y, int frame, W_Image *image, int overframe, W_Image *overimage, W_Color color );
extern void W_RenameWindow ( W_Window window, char *str );
extern void W_ResizeMenu ( W_Window window, int neww, int newh );
extern void W_ResizeText ( W_Window window, int neww, int newh );
extern void W_ResizeWindow ( W_Window window, int neww, int newh );
extern void W_RevertCursor ( W_Window window );
extern void W_SetIconWindow ( W_Window win, W_Window icon );
extern void W_SetSensitive ( W_Window window, int v );
extern int W_Socket ( void );
extern void W_Sync ( void );
extern void W_TileWindow ( W_Window window, W_Image *image );
extern void W_TranslatePoints ( W_Window window, int *x, int *y );
extern void W_UnmapWindow ( W_Window window );
extern void W_UnTileWindow ( W_Window window );
extern void W_UpdateScrollBar ( W_Window window );
extern void W_WarpPointer ( W_Window window, int x, int y );
extern int W_WindowHeight ( W_Window window );
extern int W_WindowWidth ( W_Window window );
extern void W_WriteAnyTriangle ( W_Window window, int X1, int Y1, int X2, int Y2, int X3, int Y3, W_Color color );
extern void W_WriteArc ( int filled, W_Window window, int x, int y, int width, int height, int angle1, int angle2, W_Color color );
extern void W_WriteText ( W_Window window, int x, int y, W_Color color, char *str, int len, W_Font font );
extern void W_WriteTriangle ( W_Window window, int x, int y, int s, int t, W_Color color );

/* strfuncs.c: strfuncs.c
 *
 * Kevin P. Smith  6/11/89
 * Bill Dyess      9/29/93  - moved all default settings to resetDefaults
 *                           from main
 * Bill Dyess	   11/8/93  - created expandFilename function
 * Bill Dyess      11/20/93 - added #include capability
 * Bob Glamm       9/25/95 - moved strcmpi, strncmpi out of defaults.c
 */

extern char * strtolower ( char *s );
extern char * strtoupper ( char *s );

#else /* __STDC__ */

/* colors.c: colors.c
 *
 * Kevin P. Smith  6/11/89
 */

extern void getColorDefs (/* void */);

/* credits.c:
 * credits.c
 *
 * Bill Dyess
 *
 */
extern void showCredits (/* W_Window win */);

/* dashboard.c:
 * dashboard.c - graphic tstatw - 6/2/93
 *
 * copyright 1993 Lars Bernhardsson (lab@mtek.chalmers.se)
 * Free to use as long as this notice is left here.
 *
 * Color by Nick Trown.
 * Paradise shoehorning by Bill Dyess.
 * Rainbow dashboard by Bill Dyess
 */
extern void db_bar (/* char *lab, int x, int y, int value, int tmpmax, int max, int digits, int color */);
extern void db_box (/* int x, int y, int width, int height, int f, int color */);
extern void db_color_bar (/* char *lab, int x, int y, int barvalue, int numvalue, int tmpmax, int max, int digits */);
extern void db_flags (/* int fr */);
extern void db_redraw (/* int fr */);
extern void db_redraw_BRM (/* int fr */);
extern void db_redraw_krp (/* int fr */);
extern void db_timer (/* int fr, int xloc, int yloc */);
extern void light_erase (/* void */);
extern void light_receive (/* void */);
extern void light_send (/* void */);
extern void redrawTstats (/* void */);
extern void stline (/* int flag */);

/* death.c:
 * death.c
 */
extern void death (/* void */);
extern void redraw_death_messages (/* void */);

/* detonate.c:
 * detonate.c
 */
extern void detmine (/* void */);

/* defaults.c: defaults.c
 *
 * Kevin P. Smith  6/11/89
 * Bill Dyess      9/29/93  - moved all default settings to resetDefaults
 *                           from main
 * Bill Dyess	   11/8/93  - created expandFilename function
 * Bill Dyess      11/20/93 - added #include capability
 */
extern int booleanDefault (/* char *def, int preferred */);
extern int defaultShip (/* int preferred */);
extern char * expandFilename (/* char *filename */);
extern void freeDefaults (/* void */);
extern char * initDefaults (/* char *deffile */);
extern void initLogFile (/* void */);
extern int intDefault (/* char *def, int preferred */);
extern void resetDefaults (/* void */);
extern char * stringDefault (/* char *def, char *preferred */);

/* defwin.c: This file generated by configure. */
extern char * btoa (/* int v */);
extern void def_action (/* W_Event *ev */);
extern void def_write (/* char *file */);
extern char * itos (/* int v */);
extern void showdef (/* void */);

/* die.c:
  die.c
  Copyright 1995 Bill Dyess
 */
extern void die (/* char *format, ... */);

/* distress.c:
 * distress.c
 */
extern int condmacro (/* char *bufa, char *bufb, int *inda, int *indb, int flag */);
extern void Dist2Mesg (/* struct distress *dist, char *buf */);
extern void HandleGenDistr (/* char *message, unsigned int from, unsigned int to, struct distress *dist */);
extern int itoa2 (/* int n, char s[] */);
extern int makedistress (/* struct distress *dist, char *cry, char *pm */);
extern int skipmacro (/* char buf[], int i */);
extern int solvetest (/* char *bufa, int *inda */);
extern char * strcap (/* char *s */);
extern int testmacro (/* char *bufa, char *bufb, int *inda, int *indb */);

/* dmessage.c:
 * dmessage.c
 *
 * for the client of a socket based protocol.
 * code for message window scrollback added by Bill Dyess 12/7/93
 */
extern void CheckFeatures (/* char *m */);
extern void dmessage (/* char *message, unsigned int flags, unsigned int from, unsigned int to */);
extern void evalFlags (/* int type, char *flagList */);
extern void initMessageWindows (/* void */);
extern int instr (/* char *string1, char *string2 */);
extern void logit (/* char *message */);
extern void messageWinEvent (/* W_Event *evt */);
extern void print_message (/* char *message, unsigned int flags, unsigned int from, unsigned int to */);
extern void rsvp_borg_call (/* char *message, int from */);
extern void sendVersion (/* void */);

/* enter.c:
 * enter.c
 *
 * This version modified to work as the client in a socket based protocol.
 */
extern void enter (/* void */);
extern void openmem (/* void */);

/* findslot.c:
 * findslot.c
 *
 * Kevin Smith 03/23/88
 *
 */
extern int findslot (/* void */);

/* gameconf.c: src/defines.h.  Generated automatically by configure.  */
extern void build_default_configuration (/* void */);
extern int compute_gameparam_size (/* char *buf */);
extern void free_phasers (/* void */);
extern void free_plasmas (/* void */);
extern void free_ranks (/* void */);
extern void free_royal (/* void */);
extern void free_teams (/* void */);
extern void free_thingies (/* void */);
extern void free_torps (/* void */);
extern void initialize_planets (/* void */);
extern void initialize_plasmas (/* void */);
extern void initialize_players (/* void */);
extern void initialize_thingies (/* void */);
extern void initialize_torps (/* void */);
extern void init_ranks (/* void */);
extern void init_royal (/* void */);
extern void load_default_teamlogos (/* void */);
extern void load_default_teams (/* void */);
extern void load_generic_teams (/* void */);
extern void reinit_ranks (/* void */);
extern void reinit_royal (/* void */);
extern void resize_players (/* void */);

/* getname.c:
 * getname.c
 *
 * Kevin P. Smith 09/28/88
 *
 */
extern void getname (/* char *defname, char *def_passwd */);
extern void noautologin (/* void */);

/* getship.c:
 * getship.c for client of socket protocol.
 *
 * This file has been mangled so it only sets the ship characteristics needed.
 */
extern struct ship * getship (/* int s_type */);
extern void init_galaxy_class (/* void */);
extern void init_shiptypes (/* void */);

/* helpwin.c:
 * helpwin.c
 * copyright 1991 ERic mehlhaff
 * Free to use, hack, etc. Just keep these credits here.
 * Use of this code may be dangerous to your health and/or system.
 * Its use is at your own risk.
 * I assume no responsibility for damages, real, potential, or imagined,
 * resulting  from the use of it.
 *
 * Hacked into paradise by Bill Dyess
 */
extern void fillhelp (/* void */);
extern void update_Help_to_Keymap (/* char helpmessage[] */);

/* inform.c:
 * inform.c
 */
extern void destroyInfo (/* void */);
extern void inform (/* W_Window ww, int x, int y, int key */);
extern void updateInform (/* void */);

/* interface.c:
 * interface.c
 *
 * This file will include all the interfaces between the input routines
 *  and the daemon.  They should be useful for writing robots and the
 *  like
 */
extern void beam_down (/* void */);
extern void beam_up (/* void */);
extern void bomb_planet (/* void */);
extern void cloak (/* void */);
extern int mtime (/* void */);
extern void set_course (/* unsigned int dir */);
extern void set_speed (/* int speed */);
extern void shield_down (/* void */);
extern void shield_tog (/* void */);
extern void shield_up (/* void */);

/* keymap.c:
 * keymap.c
 * Bill Dyess, 10/20/93
 */
extern void buildShipKeymap (/* struct ship *shipp */);
extern void buttonmapAdd (/* char *str, char *kmap */);
extern void cbuttonmapAdd (/* char *cstr, char *kmap */);
extern void ckeymapAdd (/* char *cstr, char *kmap */);
extern int doKeymap (/* W_Event *data */);
extern void initkeymap (/* int type */);
extern void keymapAdd (/* char *str, char *kmap */);

/* local.c: local.c, all code that writes to the local window (w) [BDyess] */
extern PlanetImageNode * createLocalImageNode (/* struct planet *p, bitstruct bits */);
extern void doShowMySpeed (/* int dx, int dy, W_Image *ship_bits, struct player *j */);
extern void local (/* void */);
extern void redraw_all_planets (/* void */);
extern void redraw_asteroids (/* void */);

/* macros.c: here's pretty much all the macro code.   */
extern void doMacro (/* W_Event *data */);
extern void doMacro2 (/* struct macro *m, W_Event *data */);
extern void getConditionalString (/* char **locpntr, char **destpntr, W_Event *data */);
extern void getTestString (/* char *buf, char **locpntr, char **destpntr, W_Event *data */);
extern void handle_conditional (/* char **locpntr, char **destpntr, W_Event *data */);
extern void handle_dollar (/* char **locpntr, char **destpntr, W_Event *data */);
extern void handle_special (/* char **locpntr, char **destpntr, W_Event *data */);
extern void handle_test (/* char **locpntr, char **destpntr, W_Event *data */);
extern void ignoreConditionalString (/* char **locpntr */);
extern void initMacros (/* void */);

/* macrowin.c:
 * macrowin.c from helpwin.c
 * copyright 1993 Nick Trown
 * copyright 1991 ERic mehlhaff
 * Free to use, hack, etc. Just keep these credits here.
 * Use of this code may be dangerous to your health and/or system.
 * Its use is at your own risk.
 * I assume no responsibility for damages, real, potential, or imagined,
 * resulting  from the use of it.
 * Yeah.....what Eric said...
 */
extern void filldist (/* int fill */);
extern void fillmacro (/* void */);
extern int formatline (/* char *line */);
extern void showMacroWin (/* void */);
extern void switchmacros (/* void */);

/* map.c: map.c, all the routines that use the map window [BDyess] */
extern PlanetImageNode * createMapImageNode (/* struct planet *p, bitstruct bits */);
extern bitstruct createPlanetBits (/* struct planet *p, char *s, int l */);
extern void drawMapPlanet (/* struct planet *p, int x, int y */);
extern W_Image * getPlanetImage (/* PlanetImageNode *lhead, struct planet *p, bitstruct bits, PlanetImageNode * (*createNode) () */);
extern void map (/* void */);

/* motdwin.c:**  Pop-up motd window code.  [BDyess] 11/21/93  ***/
extern void motdWinEvent (/* W_Event *evt */);
extern void showMotdWin (/* void */);

/* newstats.c:
 * newstats.c
 *
 * As best I can tell, this was written by Tundra Dan.
 */
extern void calibrate_Newstats (/* void */);
extern void format_value (/* int value, int start, int length */);
extern void redrawNewStats (/* void */);
extern void stat_timer (/* int fr, int xloc, int yloc */);
extern void updateNewStats (/* void */);

/* newwin.c:
 * newwin.c
 */
extern void do_refit (/* int type */);
extern void drawIcon (/* void */);
extern void erase_motd (/* void */);
extern void get_N_dispatch_outfit_event (/* int *team, int *s_type, int *lastplayercount */);
extern void mapAll (/* void */);
extern void newMotdLine (/* char *line */);
extern void newMotdPic (/* int x, int y, int width, int height, char *bits, int page */);
extern void newwin (/* char *hostmon, char *progname */);
extern void new_entrywindow (/* int *team, int *s_type */);
extern void showMotd (/* W_Window win */);
extern void showValues (/* W_Window win */);

/* option.c:
 * option.c
 */
extern int optionaction (/* W_Event *data */);
extern void optiondone (/* void */);
extern void optionredrawoption (/* int *ip */);
extern void optionredrawtarget (/* W_Window win */);
extern void optionwindow (/* void */);

/* packets.c: src/defines.h.  Generated automatically by configure.  */
extern int size_of_cpacket (/* void *pkt */);
extern int size_of_spacket (/* unsigned char *pkt */);

/* parsemeta.c:
 * meta.c     - Nick Trown    May 1993
 */
extern void metainput (/* void */);
extern void metawindow (/* void */);
extern void openmeta (/* void */);

/* planetlist.c:
 * planetlist.c
 */
extern void planetlist (/* void */);

/* planets.c:
 * planets.c
 *
 * Kevin P. Smith  2/21/89
 *
 * This file contains the galaxy definition as well as some support for
 *  determining when parts of the galactic map need to be redrawn.
 */
extern void checkRedraw (/* int x, int y */);
extern void drawStars (/* void */);
extern void initOnePlanet (/* struct planet *pl */);
extern void initPlanets (/* void */);
extern void initStars (/* void */);
extern int randcolor (/* void */);
extern void _drawStars (/* void */);
extern void _initStars (/* void */);

/* playerlist.c:
 * playerlist.c
 * modified to sort by teams by Bill Dyess on 9/23/93
 */
extern void getdesig (/* struct player *j, char *desig */);
extern char * get_players_rank_name (/* struct player *j */);
extern void playerlist (/* void */);
extern void playerlist2 (/* void */);
extern void playerwEvent (/* W_Event *data */);
extern void selectblkbozo (/* W_Event *data */);

/* ranklist.c:
 * ranklist.c
 *
 * Kevin P. Smith 12/5/88
 *
 */
extern void ranklist (/* void */);

/* ratings.c:
 * ratings.c,  2/13/94 Bill Dyess
 */
extern struct ratings * get_ratings (/* struct player *j, struct ratings *r */);

/* rotate.c:
 * rotate.c
 *
 */
extern void rotate_all (/* void */);
extern void rotate_coord (/* int *x, int *y, int d, int cx, int cy */);
extern void rotate_dir (/* unsigned char *d, int r */);
extern void rotate_gcenter (/* int *x, int *y */);

/* sintab.c:
 * sintab.c
 *
 * Also initialize blk_giwdth to 100000 and blk_windgwidth
 * to WINSIDE/blk_gwidth
 */
extern void inittrigtables (/* void */);

/* smessage.c:
 * smessage.c
 */
extern void carry_report (/* void */);
extern void emergency (/* void */);
extern char * getaddr (/* int who */);
extern char * getaddr2 (/* int flags, int recip */);
extern int getgroup (/* int address, int *recip */);
extern void message_expose (/* void */);
extern void message_off (/* void */);
extern void message_on (/* void */);
extern void pmessage (/* char *str, int recip, int group */);
extern void sendCharMessage (/* char *buffer, int ch */);
extern void smessage (/* int ichar */);
extern void smessage_ahead (/* int head, int ichar */);

/* socket.c:
 * Socket.c
 *
 * Kevin P. Smith 1/29/89
 * UDP stuff v1.0 by Andy McFadden  Feb-Apr 1992
 *
 * UDP protocol v1.0
 *
 * Routines to allow connection to the xtrek server.
 */
extern char * callServer (/* int port, char *server */);
extern int closeUdpConn (/* void */);
extern int compute_extension1_size (/* char *pkt */);
extern void connectToServer (/* int port */);
extern int gwrite (/* int fd, char *buffer, int bytes */);
extern int idx_to_mask (/* int i */);
extern int isServerDead (/* void */);
extern int mask_to_idx (/* int m */);
extern void print_totals (/* void */);
extern int readFromServer (/* void */);
extern void sendDetMineReq (/* int torp */);
extern void sendLoginReq (/* char *name, char *pass, char *loginname, int query */);
extern void sendMessage (/* char *mes, int group, int indiv */);
extern void sendOptionsPacket (/* void */);
extern void sendRepressReq (/* int state, int pnum */);
extern void sendShortPacket (/* int type, int state */);
extern void sendTeamReq (/* int team, int ship */);
extern void sendTractorReq (/* int state, int pnum */);
extern void sendUdpReq (/* int req */);
extern void sendUpdatePacket (/* long speed */);
extern void socketPause (/* int sec, int usec */);
extern int sock_read (/* int s, char *data, int size */);

/* stats.c:
 * stats.c
 */
extern void calibrate_stats (/* void */);
extern void redrawStats (/* void */);
extern void updateStats (/* void */);

/* util.c:
 * util.c
 * added functionality to gettarget() - Bill Dyess 10/6/93
 */
extern struct obtype * gettarget (/* W_Window ww, int x, int y, int targtype */);
extern struct id * getTargetID (/* W_Window ww, int x, int y, int targtype */);
extern double hypot2 (/* double x, double y */);
extern char * team_bit_string (/* int mask */);

/* varydamage.c:
 * varydamage.c
 */
extern void doHull (/* int dx, int dy, W_Image *ship_bits, struct player *j */);
extern void doShields (/* int dx, int dy, W_Image *ship_bits, struct player *j */);

/* war.c:
 * war.c
 */
extern void waraction (/* W_Event *data */);
extern void warwindow (/* void */);

/* warning.c:
 * warning.c
 */
extern void hwarning (/* char *text */);
extern char * timeString (/* time_t t */);
extern void warning (/* char *text */);

/* udpopt.c:
 * udpopt.c - present UDP control window
 */
extern void udpaction (/* W_Event *data */);
extern void udpdone (/* void */);
extern void udprefresh (/* int i */);
extern void udpwindow (/* void */);

/* blk_parsemotd.c:
 *
 */
extern void blk_parsemotd (/* char *line */);

/* shortcomm.c: This file implements all SHORT_PACKETS functions */
extern void add_whydead (/* char *s, int m */);
extern void handleVPlanet (/* unsigned char *sbuf */);
extern void handleVPlayer (/* unsigned char *sbuf */);
extern void handleVTorp (/* unsigned char *sbuf */);
extern void handleVTorpInfo (/* unsigned char *sbuf */);
extern void sendShortReq (/* int state */);
extern void sendThreshold (/* int v */);
extern char * ship_type (/* struct ship *shp */);

/* spopt.c: This file generated by configure. */
extern void spaction (/* W_Event *data */);
extern void spdone (/* void */);
extern void sprefresh (/* int i */);
extern void spwindow (/* void */);

/* ping.c:
 * ping.c
 *
 */
extern void calc_lag (/* void */);
extern void sendServerPingResponse (/* int number */);
extern void startPing (/* void */);
extern void stopPing (/* void */);

/* pingstats.c:
 * pingstats.c	(mostly taken from stats.c)
 */
extern void initPStats (/* void */);
extern int pStatsHeight (/* void */);
extern int pStatsWidth (/* void */);
extern void redrawPStats (/* void */);
extern void updatePStats (/* void */);

/* wide_plist.c: This file generated by configure. */
extern int playerlistnum (/* void */);
extern void plist_line (/* struct player *j, int pos */);
extern void Sorted_playerlist2 (/* void */);
extern void wideplayerlist (/* void */);
extern void wideplayerlist2 (/* void */);
extern void writeDiffText (/* W_Window window, int x, int y, W_Color color, char *orig, char *new, W_Font font */);

/* feature.c:
 * Feature.c
 *
 * March, 1994.    Joe Rumsey, Tedd Hadley
 *
 * most of the functions needed to handle SP_FEATURE/CP_FEATURE
 * packets.  fill in the features list below for your client, and
 * add a call to reportFeatures just before the RSA response is sent.
 * handleFeature should just call checkFeature, which will search the
 * list and set the appropriate variable.  features unknown to the
 * server are set to the desired value for client features, and off
 * for server/client features.
 *
 * feature packets look like:
struct feature_cpacket {
   char                 type;
   char                 feature_type;
   char                 arg1,
                        arg2;
   int                  value;
   char                 name[80];
};

 *  type is CP_FEATURE, which is 60.  feature_spacket is identical.
 */
extern void reportFeatures (/* void */);
extern void sendFeature (/* char *name, int feature_type, int value, int arg1, int arg2 */);

/* beeplite.c: This file generated by configure. */
extern void litedefaults (/* void */);
extern void liteplanet (/* struct planet *l, W_Color col */);
extern void liteplayer (/* struct player *j, W_Color col */);
extern int makelite (/* struct distress *dist, char *pm */);
extern void rcdlite (/* struct distress *dist */);

/* recorder.c: This file generated by configure. */
extern void pb_dokey (/* W_Event *event */);
extern void pb_framectr (/* int xloc, int yloc */);
extern void pb_input (/* void */);
extern void pb_skip (/* int frames */);
extern int readRecorded (/* int fp, char *data, int len */);
extern void recordPacket (/* char *data, int len */);
extern int startPlayback (/* void */);
extern void startRecorder (/* void */);
extern void stopRecorder (/* void */);
extern void writeUpdateMarker (/* void */);

/* senddist.c:
 * distress.c
 */
extern struct distress * loaddistress (/* enum dist_type i, W_Event *data */);
extern int pmacro (/* int mnum, int who, W_Event *data */);
extern void rcd (/* enum dist_type i, W_Event *data */);

/* tools.c: tools.c - shell escape, graphic toolsw - 10/10/93
 * 
 * copyright 1993 Kurt Siegl <siegl@risc.uni-linz.ac.at> Free to use, hack, etc.
 * Just keep these credits here. Use of this code may be dangerous to your
 * health and/or system. Its use is at your own risk. I assume no
 * responsibility for damages, real, potential, or imagined, resulting  from
 * the use of it.
 * 
 */
extern void sendTools (/* char *str */);
extern void showToolsWin (/* void */);

/* hockey.c: This file generated by configure. */
extern void drawPuckArrow (/* void */);
extern void galactic_hockey (/* void */);
extern void hockeyInit (/* void */);
extern void tactical_hockey (/* void */);

/* images.c: images.c.  Contains the image control data. [BDyess] */
extern int cmpfilenames (/* void *left, void *right */);
extern W_Image * getImage (/* int offset */);
extern int getImageNum (/* W_Image *image */);
extern W_Image * getShipImage (/* int team, int ship */);
extern void loadAllImages (/* void */);
extern void loadImageByFilename (/* char *filename */);

/* sound.c:
 * sound.c - Platform Independant Sound Support - Dec. 1994
 *
 * Copyright 1994 Sujal M. Patel (smpatel@wam.umd.edu)
 * Conditions in "copyright.h"          
 */
extern void init_sound (/* void */);
extern void kill_sound (/* void */);
extern void maybe_play_sound (/* int k */);
extern void play_sound (/* int k */);
extern void sound_completed (/* int k */);

/* main.c:
 * main.c
 */
extern int main (/* int argc, char **argv */);
extern void reaper (/* void */);

/* input.c:
 * input.c
 *
 * Modified to work as client in socket based protocol
 */
extern void dispatch_W_button_event (/* W_Event *evt */);
extern void dispatch_W_event (/* W_Event *evt */);
extern void dispatch_W_expose_event (/* W_Event *evt */);
extern void dispatch_W_key_event (/* W_Event *evt */);
extern int getcourse (/* W_Window ww, int x, int y */);
extern void initinput (/* void */);
extern void input (/* void */);

/* redraw.c:
 * redraw.c
 */
extern void intrupt (/* void */);
extern struct _clearzone * new_czone (/* void */);
extern void recalcWindowConstants (/* void */);
extern void redraw (/* void */);
extern int zoom_offset (/* int v */);

/* x11window.c: x11window.c
 *
 * Kevin P. Smith  6/11/89
 * Much modified by Jerry Frain and Joe Young
 * Many many modifications by Bill Dyess
 * Full-color rewriting done by Bill Dyess
 */
extern int checkBuffered (/* char *name */);
extern int checkloaded (/* W_Image *image */);
extern int checkMapped (/* char *name */);
extern int checkScrollSaveLines (/* char *name */);
extern int findMouseInWin (/* int *x, int *y, W_Window window */);
extern struct window * newWindow (/* Window window, int type */);
extern void W_Beep (/* void */);
extern W_Image * W_BitmapToImage (/* unsigned int width, unsigned int height, char *bits */);
extern void W_Buffer (/* W_Window window, int on */);
extern void W_CacheClearArea (/* W_Window window, int x, int y, int width, int height */);
extern void W_CacheLine (/* W_Window window, int X0, int Y0, int X1, int Y1, int color */);
extern void W_CachePoint (/* W_Window window, int x, int y, int color */);
extern void W_ChangeBorder (/* W_Window window, int color */);
extern void W_ClearArea (/* W_Window window, int x, int y, unsigned int width, unsigned int height */);
extern void W_ClearBuffer (/* W_Window window */);
extern void W_ClearWindow (/* W_Window window */);
extern W_Image * W_CreateCombinedImage (/* W_Image **imagelist, W_Color color */);
extern void W_DefineCursor (/* W_Window window, int width, int height, char *bits, char *mask, int xhot, int yhot */);
extern void W_DefineTCrossCursor (/* W_Window window */);
extern void W_DefineTextCursor (/* W_Window window */);
extern void W_Deiconify (/* W_Window window */);
extern void W_DestroyWindow (/* W_Window window */);
extern void W_DirectMaskText (/* W_Window window, int x, int y, W_Color color, char *str, int len, W_Font font */);
extern void W_DisplayBuffer (/* W_Window window */);
extern void W_DrawImage (/* W_Window window, int x, int y, int frame, W_Image *image, W_Color color */);
extern void W_DrawImageBar (/* W_Window win, int x, int y, int len, W_Image *image */);
extern void W_DrawImageNoClip (/* W_Window window, int x, int y, int frame, W_Image *image, W_Color color */);
extern void W_DrawImageOr (/* W_Window window, int x, int y, int frame, W_Image *image, W_Color color */);
extern void W_DrawPoint (/* W_Window window, int x, int y, W_Color color */);
extern void W_DrawSectorHighlight (/* W_Window window, int x, int y, int width, int h, W_Color color */);
extern void W_DrawShield (/* W_Window window, int centerx, int centery, unsigned int diameter, W_Color color */);
extern int W_EventsPending (/* void */);
extern void W_FillArea (/* W_Window window, int x, int y, unsigned int width, unsigned int height, W_Color color */);
extern void W_Flush (/* void */);
extern void W_FlushClearAreaCache (/* W_Window window */);
extern void W_FlushLineCaches (/* W_Window window */);
extern void W_FlushPointCaches (/* W_Window window */);
extern void W_FreeImage (/* W_Image *image */);
extern void W_GetEvent (/* W_Event *wevent */);
extern void W_Initialize (/* char *str */);
extern int W_IsBuffered (/* W_Window window */);
extern int W_IsMapped (/* W_Window window */);
extern int W_LoadExternalImage (/* W_Image *image */);
extern int W_LoadImage (/* W_Image *image */);
extern int W_LoadInternalImage (/* W_Image *image */);
extern void W_MakeLine (/* W_Window window, int X0, int Y0, int X1, int Y1, W_Color color */);
extern W_Window W_MakeMenu (/* char *name, int x, int y, int width, int height, W_Window parent, int border */);
extern W_Window W_MakeScrollingWindow (/* char *name, int x, int y, int width, int height, W_Window parent, char *cursname, int border */);
extern W_Window W_MakeTextWindow (/* char *name, int x, int y, int width, int height, W_Window parent, char *cursname, int border */);
extern void W_MakeTractLine (/* W_Window window, int X0, int Y0, int X1, int Y1, W_Color color */);
extern W_Window W_MakeWindow (/* char *name, int x, int y, int width, int height, W_Window parent, char *cursname, int border, W_Color color */);
extern void W_MapWindow (/* W_Window window */);
extern void W_MaskText (/* W_Window window, int x, int y, W_Color color, char *str, int len, W_Font font */);
extern int W_Mono (/* void */);
extern void W_NextEvent (/* W_Event *wevent */);
extern void W_OverlayImage (/* W_Window window, int x, int y, int frame, W_Image *image, int overframe, W_Image *overimage, W_Color color */);
extern void W_RenameWindow (/* W_Window window, char *str */);
extern void W_ResizeMenu (/* W_Window window, int neww, int newh */);
extern void W_ResizeText (/* W_Window window, int neww, int newh */);
extern void W_ResizeWindow (/* W_Window window, int neww, int newh */);
extern void W_RevertCursor (/* W_Window window */);
extern void W_SetIconWindow (/* W_Window win, W_Window icon */);
extern void W_SetSensitive (/* W_Window window, int v */);
extern int W_Socket (/* void */);
extern void W_Sync (/* void */);
extern void W_TileWindow (/* W_Window window, W_Image *image */);
extern void W_TranslatePoints (/* W_Window window, int *x, int *y */);
extern void W_UnmapWindow (/* W_Window window */);
extern void W_UnTileWindow (/* W_Window window */);
extern void W_UpdateScrollBar (/* W_Window window */);
extern void W_WarpPointer (/* W_Window window, int x, int y */);
extern int W_WindowHeight (/* W_Window window */);
extern int W_WindowWidth (/* W_Window window */);
extern void W_WriteAnyTriangle (/* W_Window window, int X1, int Y1, int X2, int Y2, int X3, int Y3, W_Color color */);
extern void W_WriteArc (/* int filled, W_Window window, int x, int y, int width, int height, int angle1, int angle2, W_Color color */);
extern void W_WriteText (/* W_Window window, int x, int y, W_Color color, char *str, int len, W_Font font */);
extern void W_WriteTriangle (/* W_Window window, int x, int y, int s, int t, W_Color color */);

/* strfuncs.c: strfuncs.c
 *
 * Kevin P. Smith  6/11/89
 * Bill Dyess      9/29/93  - moved all default settings to resetDefaults
 *                           from main
 * Bill Dyess	   11/8/93  - created expandFilename function
 * Bill Dyess      11/20/93 - added #include capability
 * Bob Glamm       9/25/95 - moved strcmpi, strncmpi out of defaults.c
 */
extern char * strtolower (/* char *s */);
extern char * strtoupper (/* char *s */);

#endif /* __STDC__ */
#endif /* _proto_h */
